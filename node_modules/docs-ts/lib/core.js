"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TE = require("fp-ts/lib/TaskEither");
var parser = require("./parser");
var path = require("path");
var A = require("fp-ts/lib/Array");
var Monoid_1 = require("fp-ts/lib/Monoid");
var markdown = require("./markdown");
var E = require("fp-ts/lib/Either");
var child_process_1 = require("child_process");
var pipeable_1 = require("fp-ts/lib/pipeable");
var RTE = require("fp-ts/lib/ReaderTaskEither");
var R = require("fp-ts/lib/Reader");
var outDir = 'docs';
var srcDir = 'src';
function file(path, content, overwrite) {
    return {
        path: path,
        content: content,
        overwrite: overwrite
    };
}
function readFile(path) {
    return function (C) {
        return pipeable_1.pipe(C.readFile(path), TE.map(function (content) { return file(path, content, false); }));
    };
}
function readFiles(paths) {
    return A.array.traverse(RTE.readerTaskEither)(paths, readFile);
}
function writeFile(file) {
    return function (C) {
        var overwrite = pipeable_1.pipe(C.debug("Overwriting file " + file.path), TE.chain(function () { return C.writeFile(file.path, file.content); }));
        var skip = C.debug("File " + file.path + " already exists, skipping creation");
        var write = pipeable_1.pipe(C.debug('Writing file ' + file.path), TE.chain(function () { return C.writeFile(file.path, file.content); }));
        return pipeable_1.pipe(C.existsFile(file.path), TE.chain(function (exists) { return (exists ? (file.overwrite ? overwrite : skip) : write); }));
    };
}
function writeFiles(files) {
    return pipeable_1.pipe(A.array.traverse(RTE.readerTaskEither)(files, writeFile), RTE.map(function () { return undefined; }));
}
var getPackageJSON = function (C) {
    return pipeable_1.pipe(C.readFile(path.join(process.cwd(), 'package.json')), TE.chain(function (s) {
        var json = JSON.parse(s);
        var name = json.name;
        return pipeable_1.pipe(C.debug("Project name detected: " + name), TE.map(function () { return ({
            name: name,
            homepage: json.homepage
        }); }));
    }));
};
var srcPattern = path.join(srcDir, '**', '*.ts');
var getSrcPaths = function (C) {
    return pipeable_1.pipe(C.getFilenames(srcPattern), TE.map(function (paths) { return A.array.map(paths, path.normalize); }), TE.chainFirst(function (paths) { return C.info(paths.length + " modules found"); }));
};
var readSources = pipeable_1.pipe(getSrcPaths, RTE.chain(readFiles));
function parseModules(files) {
    return function (C) {
        return pipeable_1.pipe(C.log('Parsing modules...'), TE.chain(function () {
            return TE.fromEither(pipeable_1.pipe(parser.run(files), E.mapLeft(function (errors) { return errors.join('\n'); })));
        }));
    };
}
var foldFiles = Monoid_1.fold(A.getMonoid());
function getExampleFiles(modules) {
    return A.array.chain(modules, function (module) {
        var prefix = module.path.join('-');
        function getDocumentableExamples(documentable) {
            return documentable.examples.map(function (content, i) {
                return file(path.join(outDir, 'examples', prefix + '-' + documentable.name + '-' + i + '.ts'), content + '\n', true);
            });
        }
        var methods = A.array.chain(module.classes, function (c) {
            return foldFiles([
                A.array.chain(c.methods, getDocumentableExamples),
                A.array.chain(c.staticMethods, getDocumentableExamples)
            ]);
        });
        var interfaces = A.array.chain(module.interfaces, getDocumentableExamples);
        var typeAliases = A.array.chain(module.typeAliases, getDocumentableExamples);
        var constants = A.array.chain(module.constants, getDocumentableExamples);
        var functions = A.array.chain(module.functions, getDocumentableExamples);
        return foldFiles([methods, interfaces, typeAliases, constants, functions]);
    });
}
function addAssertImport(code) {
    return code.indexOf('assert.') !== -1 ? "import * as assert from 'assert'\n" + code : code;
}
function handleImports(files, projectName) {
    function replaceProjectName(source) {
        var root = new RegExp("from '" + projectName + "'", 'g');
        var module = new RegExp("from '" + projectName + "/lib/", 'g');
        return source.replace(root, "from '../../src'").replace(module, "from '../../src/");
    }
    return files.map(function (f) {
        var handleProjectImports = replaceProjectName(f.content);
        var handleAssert = addAssertImport(handleProjectImports);
        return file(f.path, handleAssert, f.overwrite);
    });
}
function getExampleIndex(examples) {
    var content = examples.map(function (example) { return "import './" + path.basename(example.path) + "'"; }).join('\n') + '\n';
    return file(path.join(outDir, 'examples', 'index.ts'), content, true);
}
var examplePattern = path.join(outDir, 'examples');
var cleanExamples = function (C) {
    return pipeable_1.pipe(C.debug("Clean up examples: deleting " + examplePattern + "..."), TE.chain(function () { return C.clean(examplePattern); }));
};
var spawnTsNode = function (C) {
    return pipeable_1.pipe(C.log("Type checking examples..."), TE.chain(function () {
        return TE.fromIOEither(function () {
            var status = child_process_1.spawnSync('ts-node', [path.join(outDir, 'examples', 'index.ts')], { stdio: 'inherit' }).status;
            return status === 0 ? E.right(undefined) : E.left('Type checking error');
        });
    }));
};
function writeExamples(examples) {
    return pipeable_1.pipe(RTE.ask(), RTE.chain(function (C) {
        return pipeable_1.pipe(R.reader.of(C.log("Writing examples...")), RTE.chain(function () { return writeFiles([getExampleIndex(examples)].concat(examples)); }));
    }));
}
function typecheckExamples(projectName) {
    return function (modules) {
        var examples = handleImports(getExampleFiles(modules), projectName);
        return examples.length === 0
            ? cleanExamples
            : pipeable_1.pipe(writeExamples(examples), RTE.chain(function () { return spawnTsNode; }), RTE.chain(function () { return cleanExamples; }));
    };
}
var home = file(path.join(outDir, 'index.md'), "---\ntitle: Home\nnav_order: 1\n---\n", false);
var modulesIndex = file(path.join(outDir, 'modules', 'index.md'), "---\ntitle: Modules\nhas_children: true\npermalink: /docs/modules\nnav_order: 2\n---\n", false);
var configYMLPath = path.join(outDir, '_config.yml');
function getConfigYML(projectName, homepage) {
    return file(configYMLPath, "remote_theme: pmarsceill/just-the-docs\n\n# Enable or disable the site search\nsearch_enabled: true\n\n# Aux links for the upper right navigation\naux_links:\n  '" + projectName + " on GitHub':\n    - '" + homepage + "'\n", false);
}
var counter = 1;
function getMarkdownOutpuPath(module) {
    return path.join(outDir, 'modules', module.path.slice(1).join(path.sep) + '.md');
}
function getModuleMarkdownFiles(modules) {
    return modules.map(function (module) { return file(getMarkdownOutpuPath(module), markdown.printModule(module, counter++), true); });
}
function getMarkdownFiles(projectName, homepage) {
    return function (modules) { return [home, modulesIndex, getConfigYML(projectName, homepage)].concat(getModuleMarkdownFiles(modules)); };
}
var outPattern = path.join(outDir, '**/*.ts.md');
function writeMarkdownFiles(files) {
    var cleanOut = function (C) {
        return pipeable_1.pipe(C.log("Writing markdown..."), TE.chain(function () { return C.debug("Clean up docs folder: deleting " + outPattern + "..."); }), TE.chain(function () { return C.clean(outPattern); }));
    };
    return pipeable_1.pipe(cleanOut, RTE.chain(function () { return writeFiles(files); }));
}
function checkHomepage(pkg) {
    return pkg.homepage === undefined ? E.left('Missing homepage in package.json') : E.right(pkg.homepage);
}
exports.main = pipeable_1.pipe(getPackageJSON, RTE.chain(function (pkg) {
    return pipeable_1.pipe(RTE.fromEither(checkHomepage(pkg)), RTE.chain(function (homepage) {
        return pipeable_1.pipe(readSources, RTE.chain(parseModules), RTE.chainFirst(typecheckExamples(pkg.name)), RTE.map(getMarkdownFiles(pkg.name, homepage)), RTE.chain(writeMarkdownFiles));
    }));
}));
