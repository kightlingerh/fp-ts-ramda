"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var Console_1 = require("fp-ts/lib/Console");
var IO = require("fp-ts/lib/IO");
var pipeable_1 = require("fp-ts/lib/pipeable");
var T = require("fp-ts/lib/Task");
var TE = require("fp-ts/lib/TaskEither");
var fs = require("fs-extra");
var glob = require("glob");
var rimraf = require("rimraf");
var core = require("./core");
var capabilities = __assign({}, TE.taskEither, { getFilenames: function (pattern) { return TE.rightIO(function () { return glob.sync(pattern); }); }, readFile: function (path) { return TE.rightIO(function () { return fs.readFileSync(path, { encoding: 'utf8' }); }); }, writeFile: function (path, content) { return TE.rightIO(function () { return fs.outputFileSync(path, content); }); }, existsFile: function (path) { return TE.rightIO(function () { return fs.existsSync(path); }); }, clean: function (pattern) { return TE.rightIO(function () { return rimraf.sync(pattern); }); }, info: function (message) { return TE.rightIO(Console_1.log(chalk_1.default.bold.magenta(message))); }, log: function (message) { return TE.rightIO(Console_1.log(chalk_1.default.cyan(message))); }, debug: function (message) { return TE.rightIO(Console_1.log(chalk_1.default.gray(message))); } });
var exit = function (code) { return function () { return process.exit(code); }; };
function onLeft(e) {
    return T.fromIO(pipeable_1.pipe(Console_1.log(e), IO.chain(function () { return exit(1); })));
}
function onRight() {
    return T.fromIO(Console_1.log(chalk_1.default.bold.green('Docs generation succeeded!')));
}
exports.main = pipeable_1.pipe(core.main(capabilities), TE.fold(onLeft, onRight));
